function aircraft_dynamics(block)
%MSFUNTMPL_BASIC A Template for a Level-2 MATLAB S-Function
%   The MATLAB S-function is written as a MATLAB function with the
%   same name as the S-function. Replace 'msfuntmpl_basic' with the 
%   name of your S-function.
%
%   It should be noted that the MATLAB S-function is very similar
%   to Level-2 C-Mex S-functions. You should be able to get more
%   information for each of the block methods by referring to the
%   documentation for C-Mex S-functions.
%
%   Copyright 2003-2010 The MathWorks, Inc.

% AER1216 Fall 2021 
% Fixed Wing Project Code
%
% aircraft_dynamics.m
%
% Fixed wing simulation model file, based on the Aerosonde UAV, with code
% structure adapted from Small Unmanned Aircraft: Theory and Practice by 
% R.W. Beard and T. W. McLain. 
% 
% Inputs: 
% delta_e           elevator deflection [deg]
% delta_a           aileron deflection [deg]
% delta_r           rudder deflection [deg]
% delta_t           normalized thrust []
%
% Outputs:
% pn                inertial frame x (north) position [m]
% pe                inertial frame y (east) position [m]
% pd                inertial frame z (down) position [m]
% u                 body frame x velocity [m/s]
% v                 body frame y velocity [m/s]
% w                 body frame z velocity [m/s]
% phi               roll angle [rad]
% theta             pitch angle [rad]
% psi               yaw angle [rad]
% p                 roll rate [rad/s]
% q                 pitch rate [rad/s]
% r                 yaw rate [rad/s]
%
% Last updated: Pravin Wedage 2021-11-09

%% TA NOTE
% The code segements you must modify are located in the derivatives
% function in this .m file. Modify other sections at your own risk. 


%
% The setup method is used to set up the basic attributes of the
% S-function such as ports, parameters, etc. Do not add any other
% calls to the main body of the function.
%
setup(block);

end 


%% Function: setup ===================================================
% Abstract:
%   Set up the basic characteristics of the S-function block such as:
%   - Input ports
%   - Output ports
%   - Dialog parameters
%   - Options
%
%   Required         : Yes
%   C-Mex counterpart: mdlInitializeSizes
%
function setup(block)

% Register number of ports
block.NumInputPorts  = 1;
block.NumOutputPorts = 1;

% Setup port properties to be inherited or dynamic
block.SetPreCompInpPortInfoToDynamic;
block.SetPreCompOutPortInfoToDynamic;

% Override input port properties
for i = 1:block.NumInputPorts
    block.InputPort(i).Dimensions        = 4;
    block.InputPort(i).DatatypeID  = 0;  % double
    block.InputPort(i).Complexity  = 'Real';
    block.InputPort(i).DirectFeedthrough = false; % important to be false 
end

% Override output port properties
for i = 1:block.NumOutputPorts
    block.OutputPort(i).Dimensions       = 12;
    block.OutputPort(i).DatatypeID  = 0; % double
    block.OutputPort(i).Complexity  = 'Real';
%     block.OutputPort(i).SamplingMode = 'Sample';
end

% Register parameters
block.NumDialogPrms     = 1;
P = block.DialogPrm(1).Data; % must duplicate this line in each function

% Register sample times
%  [0 offset]            : Continuous sample time
%  [positive_num offset] : Discrete sample time
%
%  [-1, 0]               : Inherited sample time
%  [-2, 0]               : Variable sample time
block.SampleTimes = [0 0];

% Register multiple instances allowable
% block.SupportMultipleExecInstances = true;

% Register number of continuous states
block.NumContStates = 12;

% Specify the block simStateCompliance. The allowed values are:
%    'UnknownSimState', < The default setting; warn and assume DefaultSimState
%    'DefaultSimState', < Same sim state as a built-in block
%    'HasNoSimState',   < No sim state
%    'CustomSimState',  < Has GetSimState and SetSimState methods
%    'DisallowSimState' < Error out when saving or restoring the model sim state
block.SimStateCompliance = 'DefaultSimState';

% -----------------------------------------------------------------
% The MATLAB S-function uses an internal registry for all
% block methods. You should register all relevant methods
% (optional and required) as illustrated below. You may choose
% any suitable name for the methods and implement these methods
% as local functions within the same file. See comments
% provided for each function for more information.
% -----------------------------------------------------------------

% block.RegBlockMethod('PostPropagationSetup',    @DoPostPropSetup); % discrete states only
block.RegBlockMethod('SetInputPortSamplingMode', @SetInpPortFrameData);
block.RegBlockMethod('InitializeConditions',    @InitializeConditions);
% block.RegBlockMethod('Start',                   @Start); % Initialize Conditions is used
block.RegBlockMethod('Outputs',                 @Outputs); % Required
% block.RegBlockMethod('Update',                  @Update); % only required for discrete states
block.RegBlockMethod('Derivatives',             @Derivatives); % Required for continuous states
block.RegBlockMethod('Terminate',               @Terminate); % Required

end 


%% PostPropagationSetup:
%   Functionality    : Setup work areas and state variables. Can
%                      also register run-time methods here
%   Required         : No
%   C-Mex counterpart: mdlSetWorkWidths
%
function DoPostPropSetup(block)
block.NumDworks = 1;
  
  block.Dwork(1).Name            = 'x1';
  block.Dwork(1).Dimensions      = 1;
  block.Dwork(1).DatatypeID      = 0;      % double
  block.Dwork(1).Complexity      = 'Real'; % real
  block.Dwork(1).UsedAsDiscState = true;

end


%% InitializeConditions:
%   Functionality    : Called at the start of simulation and if it is 
%                      present in an enabled subsystem configured to reset 
%                      states, it will be called when the enabled subsystem
%                      restarts execution to reset the states.
%   Required         : No
%   C-MEX counterpart: mdlInitializeConditions
%
function InitializeConditions(block)

% Rename parameters
P = block.DialogPrm(1).Data; % must duplicate this line in each function

% Initialize continuous states
block.ContStates.Data(1) = P.pn0; 
block.ContStates.Data(2) = P.pe0;
block.ContStates.Data(3) = P.pd0;
block.ContStates.Data(4) = P.u0;
block.ContStates.Data(5) = P.v0;
block.ContStates.Data(6) = P.w0;
block.ContStates.Data(7) = P.phi0;
block.ContStates.Data(8) = P.theta0;
block.ContStates.Data(9) = P.psi0;
block.ContStates.Data(10) = P.p0;
block.ContStates.Data(11) = P.q0;
block.ContStates.Data(12) = P.r0;

end 

%% Start:
%   Functionality    : Called once at start of model execution. If you
%                      have states that should be initialized once, this 
%                      is the place to do it.
%   Required         : No
%   C-MEX counterpart: mdlStart
%
function Start(block)

block.Dwork(1).Data = 0;

end 

%% Input Port Sampling Method:
function SetInpPortFrameData(block, idx, fd)
  
  block.InputPort(idx).SamplingMode = 'Sample';
  for i = 1:block.NumOutputPorts
    block.OutputPort(i).SamplingMode  = 'Sample';   
  end
end

%% Outputs:
%   Functionality    : Called to generate block outputs in
%                      simulation step
%   Required         : Yes
%   C-MEX counterpart: mdlOutputs
%
function Outputs(block)

temp_mat = zeros(block.NumContStates,1); % thirteen states
for i = 1:block.NumContStates
     temp_mat(i) = block.ContStates.Data(i);
end

block.OutputPort(1).Data = temp_mat; % states

% for i = 1:block.NumOutputPorts
%     block.OutputPort(1).Data(i) = block.ContStates.Data(i);
% end

end 


%% Update:
%   Functionality    : Called to update discrete states
%                      during simulation step
%   Required         : No
%   C-MEX counterpart: mdlUpdate
%
function Update(block)

block.Dwork(1).Data = block.InputPort(1).Data;

end 


%% Derivatives:
%   Functionality    : Called to update derivatives of
%                      continuous states during simulation step
%   Required         : No
%   C-MEX counterpart: mdlDerivatives
%
function Derivatives(block)

% Rename parameters
P = block.DialogPrm(1).Data; % must duplicate this line in each function

% compute inertial constants
% K = ;
% k1 = ;
% k2 = ;
% k3 = ;
% k4 = ;
% k5 = ;
% k6 = ;
% k7 = ;
% k8 = ;

% map states and inputs
pn    = block.ContStates.Data(1);
pe    = block.ContStates.Data(2);
pd    = block.ContStates.Data(3);
u     = block.ContStates.Data(4);
v     = block.ContStates.Data(5);
w     = block.ContStates.Data(6);
phi   = block.ContStates.Data(7);
theta = block.ContStates.Data(8);
psi   = block.ContStates.Data(9);
p     = block.ContStates.Data(10);
q     = block.ContStates.Data(11);
r     = block.ContStates.Data(12);
delta_e = block.InputPort(1).Data(1)*pi/180 ; % converted inputs to radians
delta_a = block.InputPort(1).Data(2)*pi/180 ; % converted inputs to radians
delta_r = block.InputPort(1).Data(3)*pi/180 ; % converted inputs to radians
delta_t = block.InputPort(1).Data(4);

% Air Data 
% Va = ;
% alpha = ;
% beta = ;
%  (1) aircraft configuration parameters ****
g = 9.81; 			% gravity (m/s^2)
m = 13.5; 	    	% mass (kg)
W = m*g;   % weight (N)
Ixx = 0.8244;   % moment of inertia (kg m^2)
Iyy = 1.135;   % 
Izz = 1.759;   %
Ixz = 0.1204;
Izx = Ixz;
J = [ Ixx   0 -Ixz
        0 Iyy    0
     -Izx   0  Izz];

S = 0.55; 			% wing plan area (m^2)
c_bar = 0.18994; 	    % mean chord (m) 
b = 2.8956; 			% wing span (m) 
AR = b / c_bar;
epsilon = 0.1592;     % oswald factor, CHECK
k = 1 / (pi*epsilon*AR);
C_D_0 = 0.03;
C_m_0 = -0.02338;
% ht = 2.84; % height (m)
%propeller value
S_prop=0.2027; %m^2
C_prop=0.0018;%%CHECK
C_T=0;


%  (2) flight conditions reference point ****
%% DOUBT
Ue=60; 	% steady flight velocity (m/s): 
Va_trim=15;
Va=Va_trim;
 	
%% DOUBT ^^
% alt = 1500;     % altitude (m) @ stdatm 5000ft
%                 % or run [T,P,rho] = stdatm(alt);
% [T,P,rho] = stdatm(alt);
rho = 1.0582; 	% density (kg/m^3) %% CHECK
%% CHECK ^^
% speed_of_sound = sqrt(1.4*287*T);
speed_of_sound=343; %m/s
Mach = Ue / speed_of_sound;

%  (3) steady states
theta_e = 0;                        % pitch angle (rad) trim
% Cw = W / (0.5 * rho * S * Ue^2);    % non-dimensional term of weight \hat{mg}
% CLe = Cw * cos(theta_e); 	        % initial C_L lift coefficients 
% % Cze = -0.9530;                    % given by original data, not used here
% CDe = 0.032; 	                    % initial C_D lift coefficients (given)
% Cze = - CLe;
% Cxe = Cw * sin(theta_e);
% CTe = CDe + Cxe;
% Cme = 0.0;

Cxe=0;
Cze=0;
Cme=0;

%   (5) derivatives 

% % (4.1) the following inertia values are reverse-engineered ...
% iyy = Iyy / ( rho * S * (c_bar / 2)^3);     % non-dimensional term of moment of inertia i_{yy}
% ixx = Ixx / ( rho * S * (b / 2)^3);         % non-dimensional term of moment of inertia i_{xx}
% izz = Izz / ( rho * S * (b / 2)^3);         % non-dimensional term of moment of inertia i_{xx}
% ixz = Ixz / ( rho * S * (b / 2)^3);         % non-dimensional term of moment of inertia i_{xx}
% 
% % (4.2) mass
% muc = m / (0.5 * rho * S * c_bar);          % non-dimensional term of mass \mu for longitudinal calculations
% mub = m / (0.5 * rho * S * b);              % non-dimensional term of mass \mu for lateral calculations
% 
CLo=0.28;
CDo=0.03;
Cmo=-0.02338;
CLa=3.45;
CDa=0.30;
Cma=-0.38;
CLq=0;
CDq=0;
Cmq=-3.6;
CLdelta_e=-0.36;
CDdelta_e=0;
Cmdelta_e=-0.5;
epsilon=0.1592;

Cxu  = 0;% CTu = -0.096; CDu = 0; Cxu = CTu - CDu
Cxo=-CDo;
Cxa  = -CDa+CLo; 		% C_{x_\alpha}
Cxq  =  -CDq;
Cxdu =  0.0;			% C_{x_{\dot u}}
Cxda =  0.0; 			% C_{x_{\dot \alpha}}
Cxdq =  0.0;

Czu  = 0; %Cz =-CL
Czo=-CL0;
Cza  = -(CDo + CLa);
Czq  = -CLq;
Czdu =  0.0;
Czda =  0;
Czdq =  0.0;

Cmu  =-0.02338  ;
Cma  = -0.38;
Cmq  = -3.6 ;
Cmdu =  0.0;
Cmda = 0;
Cmdq =  0.0;

Cxdelta_e = -CDdelta_e; %C_{x_{\delta_e}}   
Czdelta_e = -CLdelta_e;
Cmdelta_e = -0.5;
Cxdelta_p = 0;  % this and the following delta_p are arbitrary
Czdelta_p = 0;
Cmdelta_p = 0;
%
Cyo=0;
Clo=0;
Cno=0;

Cyb = -0.98;          % C_{y_\beta}
Cyp = 0;
Cyr = 0;
Cydb = 0;               % C_{y_{\dot \beta}}
Cydp = 0;
Cydr = 0;

Clb = -0.12;
Clp = -0.26;
Clr =  0.14;
Cldb = 0;               % C_{l_{\dot \beta}}
Cldp = 0;
Cldr = 0;

Cnb = 0.25;
Cnp = 0.022;
Cnr = -0.35;
Cndb = 0;               % C_{n_{\dot \beta}}
Cndp = 0;
Cndr = 0;

Cydelta_a = 0;          %C_{y_{\delta_a}}
Cydelta_r = -0.17;
Cldelta_a = 0.08;
Cldelta_r = 0.105;
Cndelta_a = 0.06;
Cndelta_r = -0.032;

% =========  dimensional derivatives ================
% q = 0.5*rho*Ue^2;
qs = rho * Ue * S / 2;
qs1 = rho * Va* S / 2;
qs2 = rho * Ue * Ue * S / 2;

% ( Longitudinal terms)
Xu  = Ue*rho*S*Cxo - C_T;%
Xw  = Cxa * qs;
Xq  = Cxq * qs * c_bar / 2;
Xdw = Cxda * rho * S * c_bar / 4;  
Xdu = Cxdu * rho * S * c_bar / 4;
Xdq = Cxdq * rho * S * c_bar^2 / 8;

Zu  = (Czu + 2*Czo) * qs;
Zw  = Cza * qs;
Zq  = Ue + (Czq *S*Va*rho * c_bar /(4*m)); %% no m term in ss matrix
Zdu =  Czdu * rho * S * c_bar / 4;
Zdw = Czda * rho * S * c_bar / 4;
Zdq =  Czdq * rho * S * c_bar^2 / 8;

Mu  = (Cmu + 2*Cmo) * qs * c_bar;
Mw  = Cma * qs * c_bar;
Mq  = Cmq * rho * Va * S * c_bar * c_bar / 4;
Mdu = Cmdu * rho * S * c_bar^2 / 4;
Mdw = Cmda * rho * S * c_bar^2 / 4;
Mdq = Cmdq * rho * S * c_bar^3 / 8;

Xdelta_e = Cxdelta_e * qs1 * Ue;
Zdelta_e = Czdelta_e * qs1 * Ue;
Mdelta_e = Cmdelta_e * qs1 * Ue * c_bar;

Xdelta_p = Cxdelta_p * qs * Ue;
Zdelta_p = Czdelta_p * qs * Ue;
Mdelta_p = Cmdelta_p * qs * Ue * c_bar;

%  Lateral terms
Yv = Cyb * qs;
Yp = Cyp * qs * b / 2;
Yr =-Ue + (Cyr * qs * b / 2);
Ydv = Cydb * rho * S * b / 4;
Ydp = Cydp * rho * S * b^2 / 8;
Ydr = Cydr * rho * S * b^2 / 8;

Lv = Clb * qs * b;
Lp = Clp * qs * b^2 / 2;
Lr = Clr * qs * b^2 / 2;
Ldv = Cldb * rho * S * b^2 / 4;
Ldp = Cldp * rho * S * b^3 / 8;
Ldr = Cldr * rho * S * b^3 / 8;

Nv = Cnb * qs * b;
Np = Cnp * qs * b^2 / 2;
Nr = Cnr * qs * b^2 / 2;
Ndv = Cndb * rho * S * b^2 / 4;
Ndp = Cndp * rho * S * b^3 / 8;
Ndr = Cndr * rho * S * b^3 / 8;

Ydelta_a = Cydelta_a * qs2;
Ydelta_r = Cydelta_r * qs2;
Ldelta_a = Cldelta_a * qs2 * b;
Ldelta_r = Cldelta_r * qs2 * b;
Ndelta_a = Cndelta_a * qs2 * b;
Ndelta_r = Cndelta_r * qs2 * b;

%  Moment of Inertia data
Ixx0 = (Ixx*Izz - Ixz^2) / Izz;
Izz0 = (Ixx*Izz - Ixz^2) / Ixx;
Ixz0 = Ixz / (Ixx*Izz - Ixz^2);

%% Q2
% syms u v w p q r theta phi del_e del_p del_r del_a
% Longitudinal
Xw_dot=Xdw  ;
Xu_dot=Xdu ;
Xq_dot=Xdq ;

Zu_dot= Zdu ;
Zw_dot=Zdw ;
Zq_dot=Zdq ;

Mu_dot= Mdu ;
Mw_dot= Mdw ;
Mq_dot= Mdq ;

X_del_e= Xdelta_e ;
Z_del_e= Zdelta_e ;
M_del_e=Mdelta_e ;

X_del_p=Xdelta_p ;
Z_del_p=Zdelta_p ;
M_del_p=Mdelta_p ;

%  Lateral terms
Yv_dot =Ydv ;
Yp_dot= Ydp ;
Yr_dot= Ydr ;

Lv_dot = Ldv ;
Lp_dot= Ldp;
Lr_dot= Ldr ;

Nv_dot =  Ndv ;
Np_dot = Ndp ;
Nr_dot = Ndr ;

Y_del_a=Ydelta_a;
Y_del_r= Ydelta_r ;
L_del_a= Ldelta_a ;
L_del_r=Ldelta_r ;
N_del_a= Ndelta_a ;
N_del_r = Ndelta_r ;

%
Iy=Iyy;
Ix=Ixx;
Iz=Izz;
%%
%Longitudinal 
X_long=[u w q theta]';
U_long=[delta_e delta_t]';

Along=[Xu/m Xw/m Xq/m -g*cos(theta_e);Zu/(m-Zw_dot) Zw/(m-Zw_dot) (Zq)/(Zw_dot) -W*sin(theta_e)/(m-Zw_dot);(1/Iy)*(Mu+(Zu*Mw_dot/(m-Zw_dot))) (1/Iy)*(Mw+(Zw*Mw_dot/(m-Zw_dot))) (1/Iy)*(Mq+((Zq+m*Ue)*Mw_dot/(m-Zw_dot))) (-1/Iy)*(W*sin(theta_e)*Mw_dot/(m-Zw_dot));0 0 1 0];

Blong=[X_del_e/m X_del_p/m;Z_del_e/(m-Zw_dot) Z_del_p/(m-Zw_dot);(1/Iy)*(M_del_e+(Z_del_e*Mw_dot/(m-Zw_dot))) (1/Iy)*(M_del_p+(Z_del_p*Mw_dot/(m-Zw_dot)));0 0];
%
X_long_dot=Along*X_long + Blong*U_long;
udot=X_long_dot(1);
wdot=X_long_dot(2);
qdot=X_long_dot(3);
thetadot=X_long_dot(4);
% longitudinal model in terms of alpha
% Along_new=Along;
% Along_new(2,:)=Along(2,:)./Ue;
% Along_new(:,2)=Along(:,2).*Ue;
% Along_new(:,5)=[0 0 0 0]';
% Along_new(5,:)=[0 -Ue 0 Ue 0];
% 
% Blong_new=Blong;
% Blong_new(2,:)=Blong(2,:)./Ue;
% Blong_new(5,:)=[0 0];

% X_long_new=[u alpha q theta h];

%Lateral 
X_latr=[v p r phi psi]';
U_latr=[delta_a delta_r]';

Ixx_d=Iz/(Ix*Iz-Ixz^2);
Izz_d=Ix/(Ix*Iz-Ixz^2);
Ixz_d=Ixz/(Ix*Iz-Ixz^2);

Alatr=[Yv/m Yp/m (Yr/m) g*cos(theta_e);Ixx_d*Lv+Ixz_d*Nv Ixx_d*Lp+Ixz_d*Np Ixx_d*Lr+Ixz_d*Nr 0;Izz_d*Nv+Ixz_d*Lv Izz_d*Np+Ixz_d*Lp Izz_d*Nr+Ixz_d*Lr 0;0 1 tan(theta_e) 0];
Alatr(5,:)=[0 0 sec(theta_e) 0];
Alatr(:,5)=[0 0 0 0 0]';
Blatr=[Y_del_a/m Y_del_r/m; Ixx_d*L_del_a+Ixz_d*N_del_a Ixx_d*L_del_r+Ixz_d*N_del_r;Izz_d*N_del_a+Ixz_d*L_del_a Izz_d*N_del_r+Ixz_d*L_del_r;0 0];
Blatr(5,:)=[0 0];
%
X_latr_dot=Alatr*X_latr + Blatr*U_latr;

vdot=X_latr_dot(1);
pdot=X_latr_dot(2);
rdot=X_latr_dot(3);
phidot=X_latr_dot(4);
psidot=X_latr_dot(5);
% Lateral equations with beta in state space
% Alatr_new=Alatr;
% Alatr_new(1,:)=Alatr(1,:)./Ue;
% Alatr_new(:,1)=Alatr(:,1).*Ue;
% Alatr_new(:,5)=[0 0 0 0]';
% Alatr_new(5,:)=[0 0 sec(theta_e) 0 0];
% 
% Blatr_new=Blatr;
% Blatr_new(1,:)=Blatr(1,:)./Ue;
% Blatr_new(5,:)=[0 0];
%
C_BE=[cos(theta)*cos(psi) sin(phi)*sin(theta)*cos(psi)-cos(phi)*sin(psi) cos(phi)*sin(theta)*cos(psi)+sin(phi)*sin(psi);
    cos(theta)*sin(psi) sin(phi)*sin(theta)*sin(psi)+cos(phi)*cos(psi) cos(phi)*sin(theta)*sin(psi)-sin(phi)*cos(psi);
    -sin(theta) sin(phi)*cos(theta) cos(phi)*cos(theta)]';
X_e=C_BE*[u v w]';
pndot = X_e(1); 
pedot =X_e(2) ;
pddot = X_e(3);
% rotation matrix

% Aerodynamic Coefficients 
% compute the nondimensional aerodynamic coefficients here

% aerodynamic forces and moments
% compute the aerodynamic forces and moments here

% propulsion forces and moments
% compute the propulsion forces and moments here

% gravity
% compute the gravitational forces here

% total forces and moments (body frame)

% state derivatives
% the full aircraft dynamics model is computed here
% pdot = ;
% pndot = ;
% pedot = ;
% pddot = ;

% udot = ;
% vdot = ;
% wdot = ;
% 
% phidot = ;
% thetadot = ;
% psidot = ;
% 
% pdot = ;
% qdot = ;
% rdot = ;

% map derivatives
block.Derivatives.Data(1) = pndot;
block.Derivatives.Data(2) = pedot;
block.Derivatives.Data(3) = pddot;
block.Derivatives.Data(4) = udot;
block.Derivatives.Data(5) = vdot;
block.Derivatives.Data(6) = wdot;
block.Derivatives.Data(7) = phidot;
block.Derivatives.Data(8) = thetadot;
block.Derivatives.Data(9) = psidot;
block.Derivatives.Data(10)= pdot;
block.Derivatives.Data(11)= qdot;
block.Derivatives.Data(12)= rdot;

end 


%% Terminate:
%   Functionality    : Called at the end of simulation for cleanup
%   Required         : Yes
%   C-MEX counterpart: mdlTerminate
%
function Terminate(block)

end 

